apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: kubeflow/serving-cert
  labels:
    app: kserve
    app.kubernetes.io/name: kserve
  name: inferenceservice.serving.kserve.io
webhooks:
- admissionReviewVersions:
  - v1beta1
  clientConfig:
    caBundle: Cg==
    service:
      name: kserve-webhook-server-service
      namespace: kubeflow
      path: /mutate-serving-kserve-io-v1beta1-inferenceservice
  failurePolicy: Fail
  name: inferenceservice.kserve-webhook-server.defaulter
  rules:
  - apiGroups:
    - serving.kserve.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - inferenceservices
  sideEffects: None
- admissionReviewVersions:
  - v1beta1
  clientConfig:
    caBundle: Cg==
    service:
      name: kserve-webhook-server-service
      namespace: kubeflow
      path: /mutate-pods
  failurePolicy: Fail
  name: inferenceservice.kserve-webhook-server.pod-mutator
  namespaceSelector:
    matchExpressions:
    - key: control-plane
      operator: DoesNotExist
  objectSelector:
    matchExpressions:
    - key: serving.kserve.io/inferenceservice
      operator: Exists
  rules:
  - apiGroups:
    - ""
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - pods
  sideEffects: None
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: kserve
    app.kubernetes.io/instance: kserve-controller-manager
    app.kubernetes.io/managed-by: kserve-controller-manager
    app.kubernetes.io/name: kserve
  name: kserve-controller-manager
  namespace: kubeflow
{{ if .Values.global.useRegistryCredentials }}
imagePullSecrets:
- name: kubeflow-image-pull-secrets
{{ end }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: kserve
    app.kubernetes.io/name: kserve
  name: kserve-leader-election-role
  namespace: kubeflow
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  labels:
    app: kserve
    app.kubernetes.io/name: kserve
  name: kserve-manager-role
rules:
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  - validatingwebhookconfigurations
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - get
  - list
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - networking.istio.io
  resources:
  - virtualservices
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - networking.istio.io
  resources:
  - virtualservices/finalizers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - networking.istio.io
  resources:
  - virtualservices/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - serving.knative.dev
  resources:
  - services
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - serving.knative.dev
  resources:
  - services/finalizers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - serving.knative.dev
  resources:
  - services/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - serving.kserve.io
  resources:
  - clusterservingruntimes
  - clusterservingruntimes/finalizers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - serving.kserve.io
  resources:
  - clusterservingruntimes/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - serving.kserve.io
  resources:
  - inferenceservices
  - inferenceservices/finalizers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - serving.kserve.io
  resources:
  - inferenceservices/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - serving.kserve.io
  resources:
  - servingruntimes
  - servingruntimes/finalizers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - serving.kserve.io
  resources:
  - servingruntimes/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - serving.kserve.io
  resources:
  - trainedmodels
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - serving.kserve.io
  resources:
  - trainedmodels/status
  verbs:
  - get
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: kserve
    app.kubernetes.io/name: kserve
  name: kserve-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      rbac.authorization.kubeflow.org/aggregate-to-kubeflow-kserve-admin: "true"
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: kserve
    app.kubernetes.io/name: kserve
    rbac.authorization.kubeflow.org/aggregate-to-kubeflow-admin: "true"
  name: kubeflow-kserve-admin
rules: []
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: kserve
    app.kubernetes.io/name: kserve
    rbac.authorization.kubeflow.org/aggregate-to-kubeflow-edit: "true"
    rbac.authorization.kubeflow.org/aggregate-to-kubeflow-kserve-admin: "true"
  name: kubeflow-kserve-edit
rules:
- apiGroups:
  - serving.kserve.io
  resources:
  - inferenceservices
  - servingruntimes
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - serving.knative.dev
  resources:
  - services
  - services/status
  - routes
  - routes/status
  - configurations
  - configurations/status
  - revisions
  - revisions/status
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - deletecollection
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: kserve
    app.kubernetes.io/name: kserve
    rbac.authorization.kubeflow.org/aggregate-to-kubeflow-view: "true"
  name: kubeflow-kserve-view
rules:
- apiGroups:
  - serving.kserve.io
  resources:
  - inferenceservices
  - servingruntimes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - serving.knative.dev
  resources:
  - services
  - services/status
  - routes
  - routes/status
  - configurations
  - configurations/status
  - revisions
  - revisions/status
  verbs:
  - get
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: kserve
    app.kubernetes.io/name: kserve
  name: kserve-leader-election-rolebinding
  namespace: kubeflow
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kserve-leader-election-role
subjects:
- kind: ServiceAccount
  name: kserve-controller-manager
  namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: kserve
    app.kubernetes.io/name: kserve
  name: kserve-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kserve-manager-role
subjects:
- kind: ServiceAccount
  name: kserve-controller-manager
  namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: kserve
    app.kubernetes.io/name: kserve
  name: kserve-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kserve-proxy-role
subjects:
- kind: ServiceAccount
  name: kserve-controller-manager
  namespace: kubeflow
---
apiVersion: v1
data:
  agent: |-
    {
        "image" : "{{ .Values.kfsAgentImage }}:{{ .Values.kfsVersion }}",
        "memoryRequest": "100Mi",
        "memoryLimit": "1Gi",
        "cpuRequest": "100m",
        "cpuLimit": "1"
    }
  batcher: |-
    {
        "image" : "{{ .Values.kfsAgentImage }}:{{ .Values.kfsVersion }}",
        "memoryRequest": "1Gi",
        "memoryLimit": "1Gi",
        "cpuRequest": "1",
        "cpuLimit": "1"
    }
  credentials: |-
    {
       "gcs": {
           "gcsCredentialFileName": "gcloud-application-credentials.json"
       },
       "s3": {
           "s3AccessKeyIDName": "AWS_ACCESS_KEY_ID",
           "s3SecretAccessKeyName": "AWS_SECRET_ACCESS_KEY"
       }
    }
  deploy: |-
    {
      "defaultDeploymentMode": "Serverless"
    }
  explainers: |-
    {
        "alibi": {
            "image" : "{{ .Values.kfsAlibiExplainerImage }}",
            "defaultImageVersion": "{{ .Values.kfsExplainerVersion }}"
        },
        "aix": {
            "image" : "{{ .Values.kfsAixExplainer }}",
            "defaultImageVersion": "{{ .Values.kfsExplainerVersion }}"
        },
        "art": {
            "image" : "{{ .Values.kfsArtExplainer }}",
            "defaultImageVersion": "{{ .Values.kfsExplainerVersion }}"
        }
    }
  ingress: |-
    {
        "ingressGateway" : "knative-serving/knative-ingress-gateway",
        "ingressService" : "istio-ingressgateway.istio-system.svc.cluster.local",
        "localGateway" : "knative-serving/knative-local-gateway",
        "localGatewayService" : "knative-local-gateway.istio-system.svc.cluster.local",
        "ingressDomain"  : "example.com"
    }
  logger: |-
    {
        "image" : "{{ .Values.kfsAgentImage }}:{{ .Values.kfsVersion }}",
        "memoryRequest": "100Mi",
        "memoryLimit": "1Gi",
        "cpuRequest": "100m",
        "cpuLimit": "1",
        "defaultUrl": "http://default-broker"
    }
  predictors: |-
    {
        "tensorflow": {
            "image": "{{ .Values.kfsTensorflowImage }}",
            "defaultImageVersion": "{{ .Values.kfsTensorflowImageVersion }}",
            "defaultGpuImageVersion": "{{ .Values.kfsTensorflowImageGpuVersion }}",
            "defaultTimeout": "60",
            "supportedFrameworks": [
              "tensorflow"
            ],
            "multiModelServer": false
        },
        "onnx": {
            "image": "{{ .Values.kfsOnnxImage }}",
            "defaultImageVersion": "{{ .Values.kfsOnnxImageVersion }}",
            "supportedFrameworks": [
              "onnx"
            ],
            "multiModelServer": false
        },
        "sklearn": {
          "v1": {
            "image": "{{ .Values.kfsSkLearnImage }}",
            "defaultImageVersion": "{{ .Values.kfsSkLearnImageVersion }}",
            "supportedFrameworks": [
              "sklearn"
            ],
            "multiModelServer": true
          },
          "v2": {
            "image": "{{ .Values.kfsSeldonioImage }}",
            "defaultImageVersion": "{{ .Values.kfsSeldonioImageVersion }}",
            "supportedFrameworks": [
              "sklearn"
            ],
            "multiModelServer": true
          }
        },
        "xgboost": {
          "v1": {
            "image": "{{ .Values.kfsXgbserverImage }}",
            "defaultImageVersion": "{{ .Values.kfsXgbserverImageVersion }}",
            "supportedFrameworks": [
              "xgboost"
            ],
            "multiModelServer": true
          },
          "v2": {
            "image": "{{ .Values.kfsSeldonioImage }}",
            "defaultImageVersion": "{{ .Values.kfsSeldonioImageVersion }}",
            "supportedFrameworks": [
              "xgboost"
            ],
            "multiModelServer": true
          }
        },
        "pytorch": {
          "v1" : {
            "image": "{{ .Values.kfsPytorchImage }}",
            "defaultImageVersion": "{{ .Values.kfsPytorchImageVersion }}",
            "defaultGpuImageVersion": "{{ .Values.kfsPytorchImageGpuVersion }}",
            "supportedFrameworks": [
              "pytorch"
            ],
            "multiModelServer": false
          },
          "v2" : {
            "image": "{{ .Values.kfsTorchServeImage }}",
            "defaultImageVersion": "{{ .Values.kfsTorchServeImageVersion }}",
            "defaultGpuImageVersion": "{{ .Values.kfsTorchServeImageGpuVersion }}",
            "supportedFrameworks": [
              "pytorch"
            ],
            "multiModelServer": false
          }
        },
        "triton": {
            "image": "{{ .Values.kfsTritonImage }}",
            "defaultImageVersion": "{{ .Values.kfsTritonImageVersion }}",
            "supportedFrameworks": [
              "tensorrt",
              "tensorflow",
              "onnx",
              "pytorch"
            ],
            "multiModelServer": true
        },
        "pmml": {
            "image": "{{ .Values.kfsPmmlserverImage }}",
            "defaultImageVersion": "{{ .Values.kfsPmmlserverImageVersion }}",
            "supportedFrameworks": [
              "pmml"
            ],
            "multiModelServer": false
        },
        "lightgbm": {
            "image": "{{ .Values.kfsLgbserverImage }}",
            "defaultImageVersion": "{{ .Values.kfsLgbserverImageVersion }}",
            "supportedFrameworks": [
              "lightgbm"
            ],
            "multiModelServer": false
        },
        "paddle": {
            "image": "{{ .Values.kfsPaddleserverImage }}",
            "defaultImageVersion": "{{ .Values.kfsPaddleserverImageVersion }}",
            "supportedFrameworks": [
              "paddle"
            ],
            "multiModelServer": false
        }
    }
  storageInitializer: |-
    {
        "image" : "{{ .Values.kfsStorageInitializerImage }}:{{ .Values.kfsVersion}}",
        "memoryRequest": "100Mi",
        "memoryLimit": "1Gi",
        "cpuRequest": "100m",
        "cpuLimit": "1"
    }
  transformers: |-
    {
    }
kind: ConfigMap
metadata:
  labels:
    app: kserve
    app.kubernetes.io/name: kserve
  name: inferenceservice-config
  namespace: kubeflow
---
apiVersion: v1
data:
  ingressGateway: kubeflow/kubeflow-gateway
kind: ConfigMap
metadata:
  labels:
    app: kserve
    app.kubernetes.io/name: kserve
  name: kserve-config
  namespace: kubeflow
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: kserve
    app.kubernetes.io/name: kserve
  name: kserve-webhook-server-secret
  namespace: kubeflow
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "8443"
    prometheus.io/scheme: https
    prometheus.io/scrape: "true"
  labels:
    app: kserve
    app.kubernetes.io/name: kserve
    control-plane: kserve-controller-manager
    controller-tools.k8s.io: "1.0"
  name: kserve-controller-manager-metrics-service
  namespace: kubeflow
spec:
  ports:
  - name: https
    port: 8443
    targetPort: https
  selector:
    app: kserve
    app.kubernetes.io/name: kserve
    control-plane: kserve-controller-manager
    controller-tools.k8s.io: "1.0"
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kserve
    app.kubernetes.io/name: kserve
    control-plane: kserve-controller-manager
    controller-tools.k8s.io: "1.0"
  name: kserve-controller-manager-service
  namespace: kubeflow
spec:
  ports:
  - port: 8443
    protocol: TCP
    targetPort: https
  selector:
    app: kserve
    app.kubernetes.io/name: kserve
    control-plane: kserve-controller-manager
    controller-tools.k8s.io: "1.0"
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kserve
    app.kubernetes.io/name: kserve
  name: kserve-webhook-server-service
  namespace: kubeflow
spec:
  ports:
  - port: 443
    targetPort: webhook-server
  selector:
    app: kserve
    app.kubernetes.io/name: kserve
    control-plane: kserve-controller-manager
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: kserve
    app.kubernetes.io/name: kserve
    control-plane: kserve-controller-manager
    controller-tools.k8s.io: "1.0"
  name: kserve-controller-manager
  namespace: kubeflow
spec:
  selector:
    matchLabels:
      app: kserve
      app.kubernetes.io/name: kserve
      control-plane: kserve-controller-manager
      controller-tools.k8s.io: "1.0"
  serviceName: controller-manager-service
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        app: kserve
        app.kubernetes.io/name: kserve
        control-plane: kserve-controller-manager
        controller-tools.k8s.io: "1.0"
    spec:
      containers:
      - args:
        - --metrics-addr=127.0.0.1:8080
        command:
        - /manager
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SECRET_NAME
          value: kserve-webhook-server-cert
        image: "{{ .Values.kfsControllerImage }}:{{ .Values.kfsVersion }}"
        imagePullPolicy: Always
        name: manager
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        resources:
          limits:
            cpu: 100m
            memory: 300Mi
          requests:
            cpu: 100m
            memory: 200Mi
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=10
        image: {{ .Values.kfsKubeRbacProxyImage }}
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
      securityContext:
        runAsNonRoot: true
      serviceAccountName: kserve-controller-manager
      terminationGracePeriodSeconds: 10
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: kserve-webhook-server-cert
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  labels:
    app: kserve
    app.kubernetes.io/name: kserve
  name: serving-cert
  namespace: kubeflow
spec:
  commonName: kserve-webhook-server-service.kubeflow.svc
  dnsNames:
  - kserve-webhook-server-service.kubeflow.svc
  issuerRef:
    kind: Issuer
    name: selfsigned-issuer
  secretName: kserve-webhook-server-cert
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  labels:
    app: kserve
    app.kubernetes.io/name: kserve
  name: selfsigned-issuer
  namespace: kubeflow
spec:
  selfSigned: {}
---
apiVersion: serving.kserve.io/v1alpha1
kind: ClusterServingRuntime
metadata:
  name: kserve-lgbserver
spec:
  containers:
  - args:
    - --model_name={{`{{.Name}}`}}
    - --model_dir=/mnt/models
    - --http_port=8080
    - --nthread=1
    image: {{ .Values.kfsLgbserverImage }}:{{ .Values.kfsLgbserverImageVersion }}
    name: kserve-container
    resources:
      limits:
        cpu: "1"
        memory: 2Gi
      requests:
        cpu: "1"
        memory: 2Gi
  supportedModelFormats:
  - autoSelect: true
    name: lightgbm
    version: "2"
---
apiVersion: serving.kserve.io/v1alpha1
kind: ClusterServingRuntime
metadata:
  name: kserve-mlserver
spec:
  containers:
  - env:
    - name: MLSERVER_MODEL_IMPLEMENTATION
      value: '{{`{{.Labels.modelClass}}`}}'
    - name: MLSERVER_HTTP_PORT
      value: "8080"
    - name: MLSERVER_GRPC_PORT
      value: "9000"
    - name: MODELS_DIR
      value: /mnt/models
    image: {{ .Values.kfsSeldonioImage }}:{{ .Values.kfsSeldonioImageVersion }}
    name: kserve-container
    resources:
      limits:
        cpu: "1"
        memory: 2Gi
      requests:
        cpu: "1"
        memory: 2Gi
  supportedModelFormats:
  - name: sklearn
    version: "0"
  - name: xgboost
    version: "1"
  - name: lightgbm
    version: "3"
  - autoSelect: true
    name: mlflow
    version: "1"
---
apiVersion: serving.kserve.io/v1alpha1
kind: ClusterServingRuntime
metadata:
  name: kserve-paddleserver
spec:
  containers:
  - args:
    - --model_name={{`{{.Name}}`}}
    - --model_dir=/mnt/models
    - --http_port=8080
    image: {{ .Values.kfsPaddleserverImage }}:{{ .Values.kfsPaddleserverImageVersion }}
    name: kserve-container
    resources:
      limits:
        cpu: "1"
        memory: 2Gi
      requests:
        cpu: "1"
        memory: 2Gi
  supportedModelFormats:
  - autoSelect: true
    name: paddle
    version: "2"
---
apiVersion: serving.kserve.io/v1alpha1
kind: ClusterServingRuntime
metadata:
  name: kserve-pmmlserver
spec:
  containers:
  - args:
    - --model_name={{`{{.Name}}`}}
    - --model_dir=/mnt/models
    - --http_port=8080
    image: {{ .Values.kfsPmmlserverImage }}:{{ .Values.kfsPmmlserverImageVersion }}
    name: kserve-container
    resources:
      limits:
        cpu: "1"
        memory: 2Gi
      requests:
        cpu: "1"
        memory: 2Gi
  supportedModelFormats:
  - autoSelect: true
    name: pmml
    version: "3"
  - autoSelect: true
    name: pmml
    version: "4"
---
apiVersion: serving.kserve.io/v1alpha1
kind: ClusterServingRuntime
metadata:
  name: kserve-sklearnserver
spec:
  containers:
  - args:
    - --model_name={{`{{.Name}}`}}
    - --model_dir=/mnt/models
    - --http_port=8080
    image: {{ .Values.kfsSkLearnImage }}:{{ .Values.kfsSkLearnImageVersion }}
    name: kserve-container
    resources:
      limits:
        cpu: "1"
        memory: 2Gi
      requests:
        cpu: "1"
        memory: 2Gi
  supportedModelFormats:
  - autoSelect: true
    name: sklearn
    version: "1"
---
apiVersion: serving.kserve.io/v1alpha1
kind: ClusterServingRuntime
metadata:
  name: kserve-tensorflow-serving
spec:
  containers:
  - args:
    - --model_name={{`{{.Name}}`}}
    - --port=9000
    - --rest_api_port=8080
    - --model_base_path=/mnt/models
    - --rest_api_timeout_in_ms=60000
    command:
    - /usr/bin/tensorflow_model_server
    image: {{ .Values.kfsTensorflowImage }}:{{ .Values.kfsTensorflowImageVersion }}
    name: kserve-container
    resources:
      limits:
        cpu: "1"
        memory: 2Gi
      requests:
        cpu: "1"
        memory: 2Gi
  supportedModelFormats:
  - autoSelect: true
    name: tensorflow
    version: "1"
  - autoSelect: true
    name: tensorflow
    version: "2"
---
apiVersion: serving.kserve.io/v1alpha1
kind: ClusterServingRuntime
metadata:
  name: kserve-torchserve
spec:
  containers:
  - args:
    - torchserve
    - --start
    - --model-store=/mnt/models/model-store
    - --ts-config=/mnt/models/config/config.properties
    env:
    - name: TS_SERVICE_ENVELOPE
      value: '{{`{{.Labels.serviceEnvelope}}`}}'
    image: {{ .Values.kfsTorchServeImage }}:{{ .Values.kfsTorchServeImageVersion}}
    name: kserve-container
    resources:
      limits:
        cpu: "1"
        memory: 2Gi
      requests:
        cpu: "1"
        memory: 2Gi
  supportedModelFormats:
  - autoSelect: true
    name: pytorch
    version: "1"
---
apiVersion: serving.kserve.io/v1alpha1
kind: ClusterServingRuntime
metadata:
  name: kserve-tritonserver
spec:
  containers:
  - args:
    - tritonserver
    - --model-store=/mnt/models
    - --grpc-port=9000
    - --http-port=8080
    - --allow-grpc=true
    - --allow-http=true
    image: {{ .Values.kfsTritonImage }}:{{ .Values.kfsTritonImageVersion }}
    name: kserve-container
    resources:
      limits:
        cpu: "1"
        memory: 2Gi
      requests:
        cpu: "1"
        memory: 2Gi
  supportedModelFormats:
  - name: tensorrt
    version: "8"
  - name: tensorflow
    version: "1"
  - name: tensorflow
    version: "2"
  - autoSelect: true
    name: onnx
    version: "1"
  - name: pytorch
    version: "1"
  - autoSelect: true
    name: triton
    version: "2"
---
apiVersion: serving.kserve.io/v1alpha1
kind: ClusterServingRuntime
metadata:
  name: kserve-xgbserver
spec:
  containers:
  - args:
    - --model_name={{`{{.Name}}`}}
    - --model_dir=/mnt/models
    - --http_port=8080
    - --nthread=1
    image: {{ .Values.kfsXgbserverImage }}:{{ .Values.kfsXgbserverImageVersion }}
    name: kserve-container
    resources:
      limits:
        cpu: "1"
        memory: 2Gi
      requests:
        cpu: "1"
        memory: 2Gi
  supportedModelFormats:
  - autoSelect: true
    name: xgboost
    version: "1"
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: kubeflow/serving-cert
  labels:
    app: kserve
    app.kubernetes.io/name: kserve
  name: inferenceservice.serving.kserve.io
webhooks:
- admissionReviewVersions:
  - v1beta1
  clientConfig:
    caBundle: Cg==
    service:
      name: kserve-webhook-server-service
      namespace: kubeflow
      path: /validate-serving-kserve-io-v1beta1-inferenceservice
  failurePolicy: Fail
  name: inferenceservice.kserve-webhook-server.validator
  rules:
  - apiGroups:
    - serving.kserve.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - inferenceservices
  sideEffects: None
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: kubeflow/serving-cert
  labels:
    app: kserve
    app.kubernetes.io/name: kserve
  name: trainedmodel.serving.kserve.io
webhooks:
- admissionReviewVersions:
  - v1beta1
  clientConfig:
    caBundle: Cg==
    service:
      name: kserve-webhook-server-service
      namespace: kubeflow
      path: /validate-serving-kserve-io-v1alpha1-trainedmodel
  failurePolicy: Fail
  name: trainedmodel.kserve-webhook-server.validator
  rules:
  - apiGroups:
    - serving.kserve.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - trainedmodels
  sideEffects: None
