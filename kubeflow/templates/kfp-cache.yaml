{{- include "prechecks" . -}}
{{- if .Values.controlPlane.useRuntimeDocker }}
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: kubeflow/kfp-cache-cert
  labels:
    app: cache-server-cert-manager
  name: cache-webhook-kubeflow
webhooks:
- admissionReviewVersions:
  - v1beta1
  clientConfig:
    service:
      name: cache-server
      namespace: kubeflow
      path: /mutate
  failurePolicy: Ignore
  name: cache-server.kubeflow.svc
  objectSelector:
    matchLabels:
      pipelines.kubeflow.org/cache_enabled: "true"
  rules:
  - apiGroups:
    - ""
    apiVersions:
    - v1
    operations:
    - CREATE
    resources:
    - pods
  sideEffects: None
  timeoutSeconds: 5
{{- end }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: cache-server
    app.kubernetes.io/component: ml-pipeline
    app.kubernetes.io/name: kubeflow-pipelines
    application-crd-id: kubeflow-pipelines
  name: kubeflow-pipelines-cache
  namespace: kubeflow
{{ if .Values.global.useRegistryCredentials }}
imagePullSecrets:
- name: kubeflow-image-pull-secrets
{{ end }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: cache-server
    app.kubernetes.io/component: ml-pipeline
    app.kubernetes.io/name: kubeflow-pipelines
    application-crd-id: kubeflow-pipelines
  name: kubeflow-pipelines-cache-role
  namespace: kubeflow
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  verbs:
  - get
  - list
  - watch
  - update
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: cache-server
    app.kubernetes.io/component: ml-pipeline
    app.kubernetes.io/name: kubeflow-pipelines
    application-crd-id: kubeflow-pipelines
  name: kubeflow-pipelines-cache-role
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  verbs:
  - get
  - list
  - watch
  - update
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: cache-server
    app.kubernetes.io/component: ml-pipeline
    app.kubernetes.io/name: kubeflow-pipelines
    application-crd-id: kubeflow-pipelines
  name: kubeflow-pipelines-cache-binding
  namespace: kubeflow
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubeflow-pipelines-cache-role
subjects:
- kind: ServiceAccount
  name: kubeflow-pipelines-cache
  namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: cache-server
    app.kubernetes.io/component: ml-pipeline
    app.kubernetes.io/name: kubeflow-pipelines
    application-crd-id: kubeflow-pipelines
  name: kubeflow-pipelines-cache-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubeflow-pipelines-cache-role
subjects:
- kind: ServiceAccount
  name: kubeflow-pipelines-cache
  namespace: kubeflow
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: cache-server
    app.kubernetes.io/component: ml-pipeline
    app.kubernetes.io/name: kubeflow-pipelines
    application-crd-id: kubeflow-pipelines
  name: cache-server
  namespace: kubeflow
spec:
  ports:
  - port: 443
    targetPort: webhook-api
  selector:
    app: cache-server
    app.kubernetes.io/component: ml-pipeline
    app.kubernetes.io/name: kubeflow-pipelines
    application-crd-id: kubeflow-pipelines
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: cache-server
    app.kubernetes.io/component: ml-pipeline
    app.kubernetes.io/name: kubeflow-pipelines
    application-crd-id: kubeflow-pipelines
  name: cache-server
  namespace: kubeflow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cache-server
      app.kubernetes.io/component: ml-pipeline
      app.kubernetes.io/name: kubeflow-pipelines
      application-crd-id: kubeflow-pipelines
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "true"
      labels:
        app: cache-server
        app.kubernetes.io/component: ml-pipeline
        app.kubernetes.io/name: kubeflow-pipelines
        application-crd-id: kubeflow-pipelines
    spec:
      containers:
      - args:
        - --db_driver=$(DBCONFIG_DRIVER)
        - --db_host=$(DBCONFIG_HOST_NAME)
        - --db_port=$(DBCONFIG_PORT)
        - --db_name=$(DBCONFIG_DB_NAME)
        - --db_user=$(DBCONFIG_USER)
        - --db_password=$(DBCONFIG_PASSWORD)
        - --namespace_to_watch=$(NAMESPACE_TO_WATCH)
        {{- if .Values.controlPlane.useRuntimeDocker }}
        - --tls_cert_filename=tls.crt
        - --tls_key_filename=tls.key
        {{- end }}
        env:
        - name: CACHE_IMAGE
          valueFrom:
            configMapKeyRef:
              key: cacheImage
              name: pipeline-install-config
        - name: CACHE_NODE_RESTRICTIONS
          valueFrom:
            configMapKeyRef:
              key: cacheNodeRestrictions
              name: pipeline-install-config
        - name: DBCONFIG_DRIVER
          value: mysql
        - name: DBCONFIG_DB_NAME
          valueFrom:
            configMapKeyRef:
              key: cacheDb
              name: pipeline-install-config
        - name: DBCONFIG_HOST_NAME
          valueFrom:
            configMapKeyRef:
              key: dbHost
              name: pipeline-install-config
        - name: DBCONFIG_PORT
          valueFrom:
            configMapKeyRef:
              key: dbPort
              name: pipeline-install-config
        - name: DBCONFIG_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: mysql-secret
        - name: DBCONFIG_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: mysql-secret
        - name: NAMESPACE_TO_WATCH
          value: ""
        image: {{ .Values.kfpCacheServerImage }}:{{ .Values.kfpVersion }}
        imagePullPolicy: Always
        name: server
        ports:
        - containerPort: 8443
          name: webhook-api
        volumeMounts:
        - mountPath: /etc/webhook/certs
          name: webhook-tls-certs
          readOnly: true
      serviceAccountName: kubeflow-pipelines-cache
      volumes:
      - name: webhook-tls-certs
        secret:
          secretName: webhook-server-tls
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  labels:
    app: cache-server-cert-manager
  name: kfp-cache-cert
  namespace: kubeflow
spec:
  commonName: kfp-cache-cert
  dnsNames:
  - cache-server
  - cache-server.kubeflow
  - cache-server.kubeflow.svc
  isCA: true
  issuerRef:
    kind: Issuer
    name: kfp-cache-selfsigned-issuer
  secretName: webhook-server-tls
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  labels:
    app: cache-server-cert-manager
  name: kfp-cache-selfsigned-issuer
  namespace: kubeflow
spec:
  selfSigned: {}
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  labels:
    app.kubernetes.io/component: ml-pipeline
    app.kubernetes.io/name: kubeflow-pipelines
    application-crd-id: kubeflow-pipelines
  name: service-cache-server
  namespace: kubeflow
spec:
  rules:
  - {}
  selector:
    matchLabels:
      app: cache-server
