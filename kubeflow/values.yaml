dryRun: false

# Set enableIngress to true to use Kubernetes ingress to access Kubeflow.
# else, you need to use istio-ingressgateway service.
enableIngress: false
# kubeflowHost is the VirtualService host setting,
# it should be a FQDN formated string.
# - If you are using ingress, must set kubeflowHost to a valid domain name.
# - If you are using IP to access Kubeflow, set kubeflowHost to "*" and enableIngress to false.
kubeflowHost: "*"
# kubeflowSitePrefix only supports "/" currently
kubeflowSitePrefix: "/"

# Setup tlsCrt and tlsKey to support HTTPS access (base64 encoded).
tlsCrt: ""
tlsKey: ""

global:
  useRegistryCredentials: false
  registry: quay.io
  username: someone
  password: sillyness
  email: someone@host.com

controlPlane:
  # runtime use Docker or Containerd, set to False to containerd envs.
  useRuntimeDocker: true
  # set nodeAffinityKey and nodeAffinityValues to enable control plane node affinity.
  # TODO: only support one affinity key currently.
  nodeAffinityKey: ""
  nodeAffinityValues: []
  # add tolerations using below keys:
  tolerationsKeys: []

cert-manager:
  enabled: true
istio:
  enabled: true

# Set minio.enabled = true to use embeded single node MinIO test deployment.
minio:
  enabled: true
  kfpMinioImage: minio/minio
  useKubeflowImagePullSecrets: false
  # set S3/minio service locations
  minioAK: minio
  minioSK: minio123
  minioHost: minio-service.kubeflow
  minioPort: "9000"
  minioS3Region: minio
  minioKFPBucket: mlpipeline

mysql:
  enabled: true
  host: mysql.kubeflow.svc.cluster.local
  port: "3306"
  password: ""
  username: root

# Set dex.enabled = true to use embeded Dex deployment.
# If you are using your own Dex server, 
# you need to setup below clientID, clientSecret, defaultUserEmail
dex:
  enabled: true
  oidcAuthURL: /dex/auth
  oidcProvider: http://dex.auth.svc.cluster.local:5556/dex
  skipAuthURI: "/dex"
  useridClaim: email
  useridHeader: kubeflow-userid
  useridPrefix: "\"\""
  oidcScopes: "profile email groups"
  oidcRedirectURL: /login/oidc
  # clientID: a3ViZWZsb3ctb2lkYy1hdXRoc2VydmljZQ==
  # clientSecret: WlhoaGJYQnNaUzFoY0hBdGMyVmpjbVYw
  dexImage: ghcr.io/dexidp/dex:v2.36.0
  # default user:
  defaultUserEmail: user@example.com
  defaultUserProfile: kubeflow-user-example-com
  notebookAccessPipelineDesc: "Allow access pipeline"

knative-serving:
  enabled: true

# ----------------------------------------------------
# Images
# ----------------------------------------------------
centralDashboardImage: kubeflownotebookswg/centraldashboard:v1.7.0
jupyterWebAppImage: kubeflownotebookswg/jupyter-web-app:v1.7.0
volumesWebAppImage: kubeflownotebookswg/volumes-web-app:v1.7.0
tensorboardWebAppImage: kubeflownotebookswg/tensorboards-web-app:v1.7.0

oidcAuthServiceImage: gcr.io/arrikto/kubeflow/oidc-authservice:28c59ef
kfamImage: kubeflownotebookswg/kfam:v1.7.0
podDefaultsWebhookImage: kubeflownotebookswg/poddefaults-webhook:v1.7.0
kfamProfileControllerImage: kubeflownotebookswg/profile-controller:v1.7.0
notebookControllerImage: kubeflownotebookswg/notebook-controller:v1.7.0
tensorboardControllerImage: kubeflownotebookswg/tensorboard-controller:v1.7.0
trainingOperatorImage: kubeflow/training-operator:v1-8a066f9
trainingOperatorPytorchInitImage: alpine
trainingOperatorMPIInitImage: mpioperator/kubectl-delivery:v0.2.3

notebookImageScipy: kubeflownotebookswg/jupyter-scipy:v1.7.0
notebookImagePytorch: kubeflownotebookswg/jupyter-pytorch-full:v1.7.0
notebookImagePytorchCuda: kubeflownotebookswg/jupyter-pytorch-cuda-full:v1.7.0
notebookImageTensorflow: kubeflownotebookswg/jupyter-tensorflow-full:v1.7.0
notebookImageTensorflowCuda: kubeflownotebookswg/jupyter-tensorflow-cuda-full:v1.7.0
notebookImageCodeserverPython: kubeflownotebookswg/codeserver-python:v1.7.0
notebookImageRstudioTidyverse: kubeflownotebookswg/rstudio-tidyverse:v1.7.0
tensorboardImage: tensorflow/tensorflow:2.12.0

kubectlImage: bitnami/kubectl

# kfpVersion is the version of Kubeflow Pipeline images
kfpVersion: "2.0.0-alpha.7"

kfpApiServerImageAndTag: gcr.io/ml-pipeline/api-server:2.0.0-alpha.7
# below images uses kfpVersion as version tag:
kfpFrontendImage: gcr.io/ml-pipeline/frontend
kfpVisualizationServerImage: gcr.io/ml-pipeline/visualization-server
kfpViewerCrdControllerImage: gcr.io/ml-pipeline/viewer-crd-controller
kfpScheduledWorkflowImage: gcr.io/ml-pipeline/scheduledworkflow
kfpPersistenceAgentImage: gcr.io/ml-pipeline/persistenceagent
kfpMetadataWriterImage: gcr.io/ml-pipeline/metadata-writer
kfpMetadataEnvoyImage: gcr.io/ml-pipeline/metadata-envoy
kfpCacheServerImage: gcr.io/ml-pipeline/cache-server
kfpCacheDeployerImage: gcr.io/ml-pipeline/cache-deployer

# pipeline images using unique tags:
kfpMlMetadataStoreServerImage: gcr.io/tfx-oss-public/ml_metadata_store_server:1.13.0
kfpCacheImage: gcr.io/google-containers/busybox:latest
kfpArgoExecImage: gcr.io/ml-pipeline/argoexec:v3.3.8-license-compliance
kfpArgoControllerImage: gcr.io/ml-pipeline/workflow-controller:v3.3.8-license-compliance
kfpMetaControllerImage: metacontrollerio/metacontroller:v2.0.4
kfpMysqlImage: gcr.io/ml-pipeline/mysql:5.7-debian
kfpPythonImage: python:3.7

# KServe
kfsVersion: "v0.10.0"
kfsExplainerVersion: "latest"

kfsAgentImage: kserve/agent
kfsAlibiExplainerImage: kserve/alibi-explainer
kfsAixExplainer: kserve/aix-explainer
kfsArtExplainer: kserve/art-explainer

kfsTensorflowImage: tensorflow/serving
kfsTensorflowImageVersion: "2.12.0"
kfsTensorflowImageGpuVersion: "2.12.0-gpu"

kfsOnnxImage: mcr.microsoft.com/onnxruntime/server
kfsOnnxImageVersion: "latest"

kfsSkLearnImage: kserve/sklearnserver
kfsSkLearnImageVersion: "v0.10.0"

kfsSeldonioImage: seldonio/mlserver
kfsSeldonioImageVersion: "1.3.0.rc2"

kfsXgbserverImage: kserve/xgbserver
kfsXgbserverImageVersion: "latest"

kfsTorchServeImage: pytorch/torchserve-kfs
kfsTorchServeImageVersion: "0.7.1"
kfsTorchServeImageGpuVersion: "0.7.1-gpu"

kfsTritonImage: nvcr.io/nvidia/tritonserver
kfsTritonImageVersion: "23.03-py3"

kfsPmmlserverImage: kserve/pmmlserver
kfsPmmlserverImageVersion: "latest"

kfsLgbserverImage: kserve/lgbserver
kfsLgbserverImageVersion: "latest"

kfsPaddleserverImage: kserve/paddleserver
kfsPaddleserverImageVersion: "latest"

kfsStorageInitializerImage: kserve/storage-initializer
kfsControllerImage: kserve/kserve-controller
kfsKubeRbacProxyImage: gcr.io/kubebuilder/kube-rbac-proxy:v0.14.0
kfsModelsWebAppImage: kserve/models-web-app:0.10.0

# Used by templates/cluster-local-gateway.yaml for knative istio confs.
knativeProxyvImage: istio/proxyv2:1.17.2
# Configmap used by istio, for creating kfserving "cluster-local-gateway".
# You may use `kubectl -n istio-system get configmap` to confirm.
knativeIstioConfigmap: istio
# istio configuration "ISTIO_META_CLUSTER_ID" used by kfserving cluster-local-gateway.
# Default: Kubernetes
istioMetaClusterID: Kubernetes

